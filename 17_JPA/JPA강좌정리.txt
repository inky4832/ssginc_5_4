 JPA ( Java Persistence API ) 개요 
 - 버전업된 경우에는 ( Jakarta Persistence API ) 임.

 1. 특징
  - ORM 프레임워크 ( Object-Relational Mapping) 
   ==> 자바의 클래스(엔티티,entity)를 이용해서 DB의 테이블를 자동생성. ( 자바의 클래스와 DB 테이블이 맵핑됨)
       자바의 메서드가 DB의 SQL를 자동 실행함. ( 자바의 메서드와 DB의 SQL이 맵핑됨 )

  - 이전의 mybatis는 SQL mapper 임. ( 명시적으로 sql문이 지정된 태그를 알려주는 방식으로 사용 )


  - JPA는 명세서임. ( 자바의 인터페이스와 같은 개념 )
    JAP의 명세를 구현한 구현체들이 있음. ( 대표적으로 hibernate가 있음 )

             JPA (인터페이스)
	      |
	      |
	  hibernate(구현클래스)
  
      https://hibernate.org/
      https://docs.jboss.org/hibernate/orm/7.0/introduction/html_single/Hibernate_Introduction.html

  - Spring Data JPA ( 최종목표 )
    ==> hibernate 기술을 개발자들이 쉽게 사용하도록 커스터마이징한 스프링 서브프로젝트임.

    https://docs.spring.io/spring-data/jpa/reference/jpa/getting-started.html

 
 2. 환경설정

   가. MySQL 설치
   나. 의존성 설정

       		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- Spring Data JPA -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
                <dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		</dependency>
	    <dependency>
		    <groupId>mysql</groupId>
		    <artifactId>mysql-connector-java</artifactId>
		    <version>8.0.33</version>
		</dependency>


  다. application.properties 설정

      # JPA 설정
      spring.jpa.show-sql=true
      spring.jpa.hibernate.ddl-auto=create|create-drop|update|validate|none

       create     :  drop하고 create
       create-drop:  create하고 프로그램 종료때 drop
       update     :  기존 테이블과 변경상태만 반영
       validate   :  엔티티와 테이블이 정상 매핑되었는지 확인만 함
       none       :  사용안함.
 
     이 옵션은 개발환경에서만 사용해야 된다.

     # RDB Dialect 설정
     spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect


  라. 엔티티 작성

     - DTO와 비슷

     @Entity  // 테이블과 맵핑, 기본적으로 생성된 테이블의 이름은 클래스명을 따른다.
     public class Member{

         @Id  // 테이블의 pk 맵핑
         long id;
	 String name;
	 int age;

         //getter,setter
	 //생성자
	 //toString
     }
     
     - 규칙
       반드시 기본생성자 필수
       final, enum,  interface, inner 클래스 사용불가
       변수에 final 사용 불가
##########################################################################################
3. 객체와 테이블 맵핑

  - @Entity : 테이블과 맵핑
  - @Id     : pk와 맵핑
  - @Table  : 생성되는 테이블의 정보 지정 가능
              4.3. Mapping entities to tables 참조


4. 변수(속성)와 컬럼 맵핑

     4.5. Mapping to columns 참조

        @Id
	@Column(name = "member_id")
	long id;
	
	@Column(name="name", length = 100)
	String username;
	
	int age;
	
	@Column(unique = true, nullable = false)
	String address;
	
	LocalDate hiredate;
	
	//3.11. Enumerated types 참조
	@Enumerated(EnumType.STRING)
	RoleType roleType;
	
	@Lob
	String description;
	
	@Transient   
	String email;  // 테이블의 컬럼에서 skip됨

##########################################################
5. 기본키 맵핑
 
 3.5. Generated identifiers 참조

  - @Id: 테이블의 PK 역할.
  - @GeneratedValue(strategy=GenerationType.IDENTITY) <==== mysql에서는 auto_increment로 생성됨.

#######################################################################################
6. 영속성 관리 

 - @Entity로 지정된 객체를  영속성객체 라고 부름.
 - 영속성 객체를 관리하는 객체는 EntityManager 임.
   EntityManager를 생성해주는 객체는 EntityManagerFactory임.
   
   EntityManagerFactory는 한번만 생성하고 필요시 EntityManager를 생성해서 DB 연동함.
   이때 주요한 특징은 EntityManager 객체를 thread-safe 하게 로컬변수 형태로 사용해야됨. (***********)
   그리고 반드시 트랜잭션범위안에서 사용해야 된다. (***********)

 - 영속성 컨텍스트: 영속성 객체를 관리하는 저장소 역할.

 - 4가지 영속성객체 상태

   가. 비영속
      - 영속성 컨텍스트에 아직 설정되지 않은 상태의미.

   나. 영속 상태 (*****)
      - 트랜잭션 범위내에서 영속성 컨텍스트에서 영속성 객체가 관리되는 상태의미.
      - 예>  저장:persist()
            조회:find() 

   다. 준영속
      - 영속 상태였다가 비영속상태로 분리되는 상태의미
        예> detatch()

   라. 삭제
      - 엔티티가 제거됨.
       예> remove()


7. 데이터 저장
 
  - 개념: 엔티티 컨텍스트에 새로운 엔티티 생성 의미

     예> 
         @Entity
	 public class Member{
	      @Id
	      long id;
	      String name;
	 }
              
              tx.begin()                    엔티티 컨텍스트                            DB(MySQL)
       개발자 ------------------------->                            --------------->
 
             Member m = new Member();            Member(영속상태)
             ( 비영속 상태)
                                    persist(m)                     tx.commit() -----> insert문 생성
				                                                      
    ===> Spring에서는 @Transactional 를 사용.

8. 데이터 조회
 
   - 개념: 엔티티 컨텍스트에 기존 엔티티 검색 의미


   
                                               엔티티 컨텍스트                            DB(MySQL)
       개발자 ------------------------->                            --------------->
                                                                                      101L 홍길동
										      102L 이순신
             
                         find(101L) ----------------------------------------------> select문 실행
			                                        <----------------존재하지 않으면
            <----------- --------------------   Entity(101L해당) <----------------존재하면                      결과반환

                        find(101L) ------------> 엔티티컨텍스트에 엔티티가 존재하기 때문에
			                         select문 생성 안됨.
	    <----------- --------------------  
	            결과반환 ( 1차 캐시)


9. 더티체킹(dirty checking) <= 엔티티 수정

    - 자동으로 엔티티 컨텍스트의 엔티티객체의 변수값과 
             DB의 레코드 컬럼값을 비교해서 
	     일치하지 않으면 자동으로 변경된 엔티티 값을 
	     DB에 반영시킴.



   현재 상황:

       홍길동--> 유관순으로 변경하고자 한다면
                                               엔티티 컨텍스트                            DB(MySQL)
       개발자 ------------------------->                            --------------->
                                                                                      101L 홍길동
										      102L 이순신

										     
       1)Member m = em.find(101L) -------------->   없으면     ------------------> 2)select문 생성됨
                                              3) Entity(101L,홍길동)
             <--------------------------------
	        4) 결과반환                                             엔티티와 DB 비교
       5) 이름변경                               6) 엔티티 변경         7) ------------
         m.setUsername("유관순")                  Entity(101L,유관순)                 101L 홍길동
	                                                          
								   8) 더티체킹으로 인한
								      update문 생성됨.

								                  9) 101L,유관순

										 
10. 엔티티 삭제- DB레코드 삭제


  현재 상황:

       유관순 삭제하고자 한다면
                                               엔티티 컨텍스트                            DB(MySQL)
       개발자 ------------------------->                            --------------->
                                                                                      101L 유관순
										      102L 이순신
        1)Member m = em.find(101L) -------------->   없으면     ------------------> 2)select문 생성됨
                                              3) Entity(101L,유관순)
          <--------------------------------
	        4) 결과반환     
		
      5) em.remove(m); ---------------------> Entity(101L,유관순)삭제 --------------> 6)delete문 생성

                                                                                    102L 이순신 남음


										  
11. 연관관계
  https://docs.jboss.org/hibernate/orm/7.0/introduction/html_single/Hibernate_Introduction.html
  3.15. Associations
  1) 다대일 ( N:1 )

      Memeber: Team

      ==> Member 를 통해서만 Team으로 갈수 있음. 단방향
                
           Member *--------------------------1>Team
         
	  @ManyToOne
	  @JoinColumn(name = "team_id")
	  Team team;

          fk 생성됨.


      ==> Member와 Team 이 서로 참조 할 수 있음. 양방향 ( 주의할점은 toString() 임. 무한루프 가능성이 매우 높음 )
          Member<----------------------------->Team
						
					      @Id
					      @Columne(name="team_id")
					      long id;
          @ManyToOne                          @OneToMany(mappedBy="team")
	  @JoinColumn(name = "team_id")       List<Member> members = new ArrayList<>();
	  Team team;

          fk 생성됨.

        toString(){                            toString(){

         return ~~~+"team:"+ team;                   return ~~~+"mamebr:"+ member;
	}

        


  2) 일대일 ( 1:1 )

     Member:Locker

      ==> Member 를 통해서만 Locker으로 갈수 있음. 단방향
                
           Member *--------------------------1>Locker
                                              @Id
					      @Columne(name="locker_id")
					      long id;
	  @OneToOne                       
	  @JoinColumn(name = "locker_id")
	  Team team;

          fk 생성됨.



12. JPQL ( Java Persistence Query Language )

  https://docs.jboss.org/hibernate/orm/7.0/querylanguage/html_single/Hibernate_Query_Language.html


13. Spring Data JPA

  - 이전 hibernate의 사용문법을 쉽게 사용할 수 있도록 커스터마이징한 Spring 서브 프로젝트임.

  예> 기존 emp 테이블/ dept 테이블 사용
  
  1). application.properties

    spring.jpa.hibernate.ddl-auto=none

  2). 엔티티 생성하고 연관관계 설정
     
     Emp.java


     Dept.java

  3) 전체적인 아키텍쳐에 필요한 빈 작성
                                                                  
                                   EmpService
    EmpController  --------------> EmpServiceImpl -----------> EmpRepository(******) ---> MySQL
                                                                     
								     Emp.java  <--------> emp테이블
								     Dept.java <--------> dept테이블

   * EmpRepository
    - JPA에서는 인터페이스로 작성
    - extends JpaRepository<엔티티명, @Id타입>

    /*
	 *   다음  메서드가 지원됨.
	 *    findAll()
	 *    findById()
	 *    count()
	 *    delete()
	 *    deleteByid()
	 *    
	 *   이외의 변수로 조회하기 위해서는 추가로 메서드를 정의해야 된다. (Query Method 규칙을 따름 )
	 *   https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html
	 * 
	 */


    4) 엔티티와 DTO                                     |
                                                      | 
                                  EmpService          |
    EmpController  --------------> EmpServiceImpl -----------> EmpRepository(******) ---> MySQL
                                                      |
						      |
					DTO	      |     Entity


   DTO와 Entity 간 변환 외부라이브러리

   -mapstruct, ModleMapper(*)

   <!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
<dependency>
    <groupId>org.modelmapper</groupId>
    <artifactId>modelmapper</artifactId>
    <version>3.2.0</version>
</dependency>
